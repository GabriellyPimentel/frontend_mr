import { z } from 'zod';

// üõ†Ô∏è Modo de desenvolvimento - mais permissivo
const isDevelopment = process.env.NODE_ENV === 'development';

// üìù Fun√ß√£o para validar CPF (modo desenvolvimento)
const validarCPF = (cpf: string): boolean => {
  console.log('üîç Validando CPF:', cpf);
  
  // Remove tudo que n√£o √© n√∫mero
  const cpfLimpo = cpf.replace(/[^\d]/g, '');
  console.log('üßπ CPF limpo:', cpfLimpo);
  
  // Em desenvolvimento, aceita qualquer CPF com 11 d√≠gitos
  if (isDevelopment) {
    if (cpfLimpo.length === 11) {
      console.log('üõ†Ô∏è Modo desenvolvimento: CPF aceito');
      return true;
    } else {
      console.log('‚ùå CPF deve ter 11 d√≠gitos');
      return false;
    }
  }
  
  // Verifica se tem 11 d√≠gitos
  if (cpfLimpo.length !== 11) {
    console.log('‚ùå CPF n√£o tem 11 d√≠gitos:', cpfLimpo.length);
    return false;
  }
  
  // Verifica se n√£o s√£o todos os d√≠gitos iguais (111.111.111-11, etc.)
  if (/^(\d)\1{10}$/.test(cpfLimpo)) {
    console.log('‚ùå CPF com todos d√≠gitos iguais');
    return false;
  }
  
  // Valida√ß√£o matem√°tica do CPF (apenas em produ√ß√£o)
  try {
    // Calcula primeiro d√≠gito verificador
    let soma = 0;
    for (let i = 0; i < 9; i++) {
      soma += parseInt(cpfLimpo.charAt(i)) * (10 - i);
    }
    let resto = (soma * 10) % 11;
    if (resto === 10 || resto === 11) resto = 0;
    if (resto !== parseInt(cpfLimpo.charAt(9))) {
      console.log('‚ùå Primeiro d√≠gito verificador inv√°lido');
      return false;
    }
    
    // Calcula segundo d√≠gito verificador
    soma = 0;
    for (let i = 0; i < 10; i++) {
      soma += parseInt(cpfLimpo.charAt(i)) * (11 - i);
    }
    resto = (soma * 10) % 11;
    if (resto === 10 || resto === 11) resto = 0;
    if (resto !== parseInt(cpfLimpo.charAt(10))) {
      console.log('‚ùå Segundo d√≠gito verificador inv√°lido');
      return false;
    }
    
    console.log('‚úÖ CPF v√°lido matematicamente');
    return true;
  } catch (error) {
    console.log('‚ùå Erro na valida√ß√£o matem√°tica do CPF:', error);
    return false;
  }
};

// üë©‚Äçüëß‚Äçüë¶ Schema de valida√ß√£o para m√£e solo
export const schemaMaeSolo = z.object({
  nome: z.string()
    .min(2, 'Nome deve ter pelo menos 2 caracteres')
    .max(100, 'Nome muito longo'),
  cpf: z.string()
    .min(11, 'CPF deve ter 11 d√≠gitos')
    .max(14, 'CPF inv√°lido')
    .refine(validarCPF, {
      message: isDevelopment 
        ? 'CPF deve ter 11 d√≠gitos (qualquer n√∫mero serve em desenvolvimento)' 
        : 'CPF inv√°lido'
    }),
  email: z.string()
    .email('Email inv√°lido')
    .optional()
    .or(z.literal('')),
  senha: z.string()
    .min(6, 'Senha deve ter pelo menos 6 caracteres')
    .max(50, 'Senha muito longa'),
  telefone: z.string()
    .min(10, 'Telefone deve ter pelo menos 10 d√≠gitos')
    .max(15, 'Telefone muito longo'),
  dataNascimento: z.string()
    .min(1, 'Data de nascimento √© obrigat√≥ria'),
  endereco: z.string()
    .min(5, 'Endere√ßo √© obrigat√≥rio')
    .max(200, 'Endere√ßo muito longo'),
  rendaMensal: z.coerce.number()
    .min(0, 'Renda n√£o pode ser negativa'),
  situacaoTrabalho: z.string()
    .min(1, 'Selecione uma situa√ß√£o de trabalho'),
  escolaridade: z.string()
    .min(1, 'Selecione uma escolaridade'),
});

// ü©∫ Schema de valida√ß√£o para profissional
export const schemaProfissional = z.object({
  nome: z.string()
    .min(2, 'Nome deve ter pelo menos 2 caracteres')
    .max(100, 'Nome muito longo'),
  cpf: z.string()
    .min(11, 'CPF deve ter 11 d√≠gitos')
    .max(14, 'CPF inv√°lido')
    .refine(validarCPF, {
      message: isDevelopment 
        ? 'CPF deve ter 11 d√≠gitos (qualquer n√∫mero serve em desenvolvimento)' 
        : 'CPF inv√°lido'
    }),
  email: z.string()
    .email('Email inv√°lido')
    .optional()
    .or(z.literal('')),
  senha: z.string()
    .min(6, 'Senha deve ter pelo menos 6 caracteres')
    .max(50, 'Senha muito longa'),
  telefone: z.string()
    .min(10, 'Telefone deve ter pelo menos 10 d√≠gitos')
    .max(15, 'Telefone muito longo'),
  areaAtuacao: z.string()
    .min(1, 'Selecione uma √°rea de atua√ß√£o'),
});

// üîê Schema de valida√ß√£o para login com CPF
export const schemaLogin = z.object({
  cpf: z.string()
    .min(11, 'CPF deve ter 11 d√≠gitos')
    .refine(validarCPF, {
      message: isDevelopment 
        ? 'CPF deve ter 11 d√≠gitos (qualquer n√∫mero serve em desenvolvimento)' 
        : 'CPF inv√°lido'
    }),
  senha: z.string()
    .min(1, 'Senha √© obrigat√≥ria'),
});